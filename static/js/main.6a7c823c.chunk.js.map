{"version":3,"sources":["serviceWorker.js","components/data.jsx","components/test.jsx","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","Mydata","Component","props","state","items","isLoaded","fetch","then","res","json","setState","msg","this","className","map","item","key","name","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"iNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CC2BSC,GC5CIC,Y,YDEf,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,MAAM,GACNC,UAAS,GAJC,E,iFAQC,IAAD,OACfC,MAAM,8CACLC,MAAM,SAAAC,GAAG,OAAEA,EAAIC,UACfF,MAAM,SAAAE,GACH,EAAKC,SAAS,CACVL,UAAS,EACTD,MAAMK,EAAKE,W,+BAKhB,IAAD,EACkBC,KAAKT,MAArBE,EADF,EACEA,SAASD,EADX,EACWA,MACf,OAAKC,EAKG,yBAAKQ,UAAU,SACX,4BACKT,EAAMU,KAAI,SAAAC,GAAI,OACX,wBAAIC,IAAKD,EAAKE,MAAd,SACWF,EAAKE,WARzB,iD,GAxBKhB,cEOrBiB,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SH2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,iB,kBIrInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.6a7c823c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nclass Mydata extends Component {\r\n \r\n    constructor(props){\r\n        super(props);\r\n        this.state = { \r\n            items:[],\r\n            isLoaded:false,\r\n         }\r\n    }\r\n\r\n   componentDidMount(){\r\n       fetch('https://kyawzaywin.herokuapp.com/usersinfo')\r\n       .then (res=>res.json())\r\n       .then (json=>{\r\n           this.setState({\r\n               isLoaded:true,\r\n               items:json.msg,\r\n           })\r\n       });\r\n   }\r\n    \r\n render(){\r\n    const {isLoaded,items}=this.state\r\n     if( !isLoaded ){\r\n         return <div>Loading.....</div>;\r\n     }\r\n     else{\r\n         return (\r\n             <div className=\"Hello\">\r\n                 <ul>\r\n                     {items.map(item=>(\r\n                         <li key={item.name}>\r\n                             Name: {item.name}\r\n                         </li>\r\n                     ))}\r\n                 </ul>\r\n             </div>\r\n         )\r\n     }\r\n\r\n }\r\n\r\n}\r\n \r\nexport default Mydata;","import React, { Component } from 'react';\r\nclass Test extends Component {\r\n    state = { \r\n        count:1,\r\n        names : ['Mg Mg','Aung Aung','Tun Tun','Su Su','Ma Ma']\r\n     }\r\n    render() { \r\n     let classes= \"ml-5 btn btn-\";\r\n     classes += this.state.count === 0 ? \"primary\" : \r\n                  this.state.count === 1 ? \"danger\":\r\n                  this.state.count === 2 ? \"warning\":\r\n                  this.state.count ===3 ? \"dark text-white\": \"light btn-lg\"\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n<h1 style={{margin:20}} className=\"text-primary\">{this.formatCount()}</h1>\r\n<button className={classes} >click</button>\r\n<div>{this.state.names.map(name=> <p key={name}>{name}</p>)}</div>\r\n        </div>\r\n    \r\n    \r\n    );\r\n    }\r\n\r\n    formatCount(){\r\n        const {count}=this.state;\r\n      return count===0 ? <h1>hi</h1>:<h1>hello</h1>\r\n    }\r\n}\r\n \r\nexport default Test;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Test from './components/test';\nimport Mydata from './components/data';\nReactDOM.render(<Mydata />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}